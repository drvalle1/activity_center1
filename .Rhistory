#distance decay parameter
phi.true=phi=0.1
#generate data
y=matrix(NA,n.tsegm,n.grid)
for (i in 1:n.tsegm){
#calculate distance
x2=(grid.coord$x-ac.coord$x[z[i]])^2
y2=(grid.coord$y-ac.coord$y[z[i]])^2
d=sqrt(x2+y2)
#calculate probability
tmp=exp(-phi*d)
prob=tmp/sum(tmp)
#draw results
y[i,]=rmultinom(1,size=n[i],prob=prob)
}
image(y[z==3,])
setwd('U:\\GIT_models\\activity_center1')
write.csv(y,'fake data.csv',row.names=F)
write.csv(grid.coord,'fake data grid.csv',row.names=F)
rm(list=ls(all=TRUE))
set.seed(10)
#read important functions
setwd('U:\\GIT_models\\activity_center1')
library('Rcpp')
sourceCpp('aux1.cpp')
source('gibbs sampler.R')
source('gibbs functions.R')
#get data
dat=read.csv('fake data.csv',as.is=T)
grid.coord=read.csv('fake data grid.csv',as.is=T)
#basic setup
ngibbs=1000
nburn=ngibbs/2
n.ac=10
gamma1=0.1
#initial coordinates for activity centers (define this based on data instead of uninformative as below)
ac.coord.init=data.frame(x=runif(n.ac,min=0,max=100),
y=runif(n.ac,min=0,max=100))
#run gibbs sampler
options(warn=2)
res=gibbs.activity.center(dat=dat,grid.coord=grid.coord,n.ac=n.ac,
ac.coord.init=ac.coord.init,gamma1=gamma1)
plot(res$logl,type='l')
plot(res$theta[ngibbs,],type='h')
set.seed(7)
#basic setup
n.tsegm=400
n.ac=3
n.grid=100
n=floor(runif(n.tsegm,min=0,max=900))
#spatial coordinates of locations
grid.coord=data.frame(x=runif(n.grid,min=0,max=100),
y=runif(n.grid,min=0,max=100))
#spatial coordinates of activity centers
ac.coord.true=ac.coord=data.frame(x=runif(n.ac,min=0,max=100),
y=runif(n.ac,min=0,max=100))
rangox=range(c(ac.coord$x,grid.coord$x))
rangoy=range(c(ac.coord$y,grid.coord$y))
plot(ac.coord$x,ac.coord$y,pch=19,xlim=rangox,ylim=rangoy)
points(grid.coord$x,grid.coord$y,col='red')
#cluster membership
z.true=z=sample(1:n.ac,size=n.tsegm,replace=T)
#distance decay parameter
phi.true=phi=0.1
#generate data
y=matrix(NA,n.tsegm,n.grid)
for (i in 1:n.tsegm){
#calculate distance
x2=(grid.coord$x-ac.coord$x[z[i]])^2
y2=(grid.coord$y-ac.coord$y[z[i]])^2
d=sqrt(x2+y2)
#calculate probability
tmp=exp(-phi*d)
prob=tmp/sum(tmp)
#draw results
y[i,]=rmultinom(1,size=n[i],prob=prob)
}
image(y[z==3,])
plot(res$phi,type='l')
abline(h=phi.true,col='red')
k=data.frame(estim=res$z[ngibbs,],true1=z.true)
z=table(k);z
ordem=numeric()
for (i in 1:ncol(z)){
ind=which(z[,i]==max(z[,i]))
ordem=c(ordem,ind)
}
table(k)[ordem,]
n.ac=10
ac.coord=matrix(res$coord[ngibbs-1,],n.ac,2)
ac.coord[ordem,]
ac.coord.true
rango=range(c(ac.coord.true),ac.coord[ordem,])
plot(ac.coord.true$x,ac.coord[ordem,1],xlim=rango,ylim=rango)
lines(rango,rango,col='red')
plot(ac.coord.true$y,ac.coord[ordem,2],xlim=rango,ylim=rango)
lines(rango,rango,col='red')
rm(list=ls(all=TRUE))
set.seed(7)
#basic setup
n.tsegm=400
n.ac=9
n.grid=100
n=floor(runif(n.tsegm,min=0,max=900))
#spatial coordinates of locations
grid.coord=data.frame(x=runif(n.grid,min=0,max=100),
y=runif(n.grid,min=0,max=100))
#spatial coordinates of activity centers
ac.coord.true=ac.coord=data.frame(x=runif(n.ac,min=0,max=100),
y=runif(n.ac,min=0,max=100))
rangox=range(c(ac.coord$x,grid.coord$x))
rangoy=range(c(ac.coord$y,grid.coord$y))
plot(ac.coord$x,ac.coord$y,pch=19,xlim=rangox,ylim=rangoy)
points(grid.coord$x,grid.coord$y,col='red')
#cluster membership
z.true=z=sample(1:n.ac,size=n.tsegm,replace=T)
#distance decay parameter
phi.true=phi=0.1
#generate data
y=matrix(NA,n.tsegm,n.grid)
for (i in 1:n.tsegm){
#calculate distance
x2=(grid.coord$x-ac.coord$x[z[i]])^2
y2=(grid.coord$y-ac.coord$y[z[i]])^2
d=sqrt(x2+y2)
#calculate probability
tmp=exp(-phi*d)
prob=tmp/sum(tmp)
#draw results
y[i,]=rmultinom(1,size=n[i],prob=prob)
}
image(y[z==3,])
setwd('U:\\GIT_models\\activity_center1')
write.csv(y,'fake data.csv',row.names=F)
write.csv(grid.coord,'fake data grid.csv',row.names=F)
rm(list=ls(all=TRUE))
set.seed(10)
#read important functions
setwd('U:\\GIT_models\\activity_center1')
library('Rcpp')
sourceCpp('aux1.cpp')
source('gibbs sampler.R')
source('gibbs functions.R')
#get data
dat=read.csv('fake data.csv',as.is=T)
grid.coord=read.csv('fake data grid.csv',as.is=T)
#basic setup
ngibbs=1000
nburn=ngibbs/2
n.ac=10
gamma1=0.1
#initial coordinates for activity centers (define this based on data instead of uninformative as below)
ac.coord.init=data.frame(x=runif(n.ac,min=0,max=100),
y=runif(n.ac,min=0,max=100))
#run gibbs sampler
options(warn=2)
res=gibbs.activity.center(dat=dat,grid.coord=grid.coord,n.ac=n.ac,
ac.coord.init=ac.coord.init,gamma1=gamma1)
set.seed(7)
#basic setup
n.tsegm=400
n.ac=9
n.grid=100
n=floor(runif(n.tsegm,min=0,max=900))
#spatial coordinates of locations
grid.coord=data.frame(x=runif(n.grid,min=0,max=100),
y=runif(n.grid,min=0,max=100))
#spatial coordinates of activity centers
ac.coord.true=ac.coord=data.frame(x=runif(n.ac,min=0,max=100),
y=runif(n.ac,min=0,max=100))
rangox=range(c(ac.coord$x,grid.coord$x))
rangoy=range(c(ac.coord$y,grid.coord$y))
plot(ac.coord$x,ac.coord$y,pch=19,xlim=rangox,ylim=rangoy)
points(grid.coord$x,grid.coord$y,col='red')
#cluster membership
z.true=z=sample(1:n.ac,size=n.tsegm,replace=T)
#distance decay parameter
phi.true=phi=0.1
#generate data
y=matrix(NA,n.tsegm,n.grid)
for (i in 1:n.tsegm){
#calculate distance
x2=(grid.coord$x-ac.coord$x[z[i]])^2
y2=(grid.coord$y-ac.coord$y[z[i]])^2
d=sqrt(x2+y2)
#calculate probability
tmp=exp(-phi*d)
prob=tmp/sum(tmp)
#draw results
y[i,]=rmultinom(1,size=n[i],prob=prob)
}
image(y[z==3,])
plot(res$logl,type='l')
plot(res$theta[ngibbs,],type='h')
plot(res$phi,type='l')
abline(h=phi.true,col='red')
k=data.frame(estim=res$z[ngibbs,],true1=z.true)
z=table(k);z
rm(list=ls(all=TRUE))
set.seed(11)
#read important functions
setwd('U:\\GIT_models\\activity_center1')
library('Rcpp')
sourceCpp('aux1.cpp')
source('gibbs sampler.R')
source('gibbs functions.R')
#get data
dat=read.csv('fake data.csv',as.is=T)
grid.coord=read.csv('fake data grid.csv',as.is=T)
#basic setup
ngibbs=1000
nburn=ngibbs/2
n.ac=15
gamma1=0.1
#initial coordinates for activity centers (define this based on data instead of uninformative as below)
ac.coord.init=data.frame(x=runif(n.ac,min=0,max=100),
y=runif(n.ac,min=0,max=100))
#run gibbs sampler
options(warn=2)
res=gibbs.activity.center(dat=dat,grid.coord=grid.coord,n.ac=n.ac,
ac.coord.init=ac.coord.init,gamma1=gamma1)
set.seed(7)
#basic setup
n.tsegm=400
n.ac=9
n.grid=100
n=floor(runif(n.tsegm,min=0,max=900))
#spatial coordinates of locations
grid.coord=data.frame(x=runif(n.grid,min=0,max=100),
y=runif(n.grid,min=0,max=100))
#spatial coordinates of activity centers
ac.coord.true=ac.coord=data.frame(x=runif(n.ac,min=0,max=100),
y=runif(n.ac,min=0,max=100))
rangox=range(c(ac.coord$x,grid.coord$x))
rangoy=range(c(ac.coord$y,grid.coord$y))
plot(ac.coord$x,ac.coord$y,pch=19,xlim=rangox,ylim=rangoy)
points(grid.coord$x,grid.coord$y,col='red')
#cluster membership
z.true=z=sample(1:n.ac,size=n.tsegm,replace=T)
#distance decay parameter
phi.true=phi=0.1
#generate data
y=matrix(NA,n.tsegm,n.grid)
for (i in 1:n.tsegm){
#calculate distance
x2=(grid.coord$x-ac.coord$x[z[i]])^2
y2=(grid.coord$y-ac.coord$y[z[i]])^2
d=sqrt(x2+y2)
#calculate probability
tmp=exp(-phi*d)
prob=tmp/sum(tmp)
#draw results
y[i,]=rmultinom(1,size=n[i],prob=prob)
}
image(y[z==3,])
plot(res$logl,type='l')
plot(res$theta[ngibbs,],type='h')
plot(res$phi,type='l')
abline(h=phi.true,col='red')
k=data.frame(estim=res$z[ngibbs,],true1=z.true)
z=table(k);z
ordem=numeric()
for (i in 1:ncol(z)){
ind=which(z[,i]==max(z[,i]))
ordem=c(ordem,ind)
}
table(k)[ordem,]
k=data.frame(estim=res$z[ngibbs,],true1=z.true)
z=table(k);z
set.seed(7)
#basic setup
n.tsegm=400
n.ac=9
n.grid=100
n=floor(runif(n.tsegm,min=0,max=900))
#spatial coordinates of locations
grid.coord=data.frame(x=runif(n.grid,min=0,max=100),
y=runif(n.grid,min=0,max=100))
#spatial coordinates of activity centers
ac.coord.true=ac.coord=data.frame(x=runif(n.ac,min=0,max=100),
y=runif(n.ac,min=0,max=100))
rangox=range(c(ac.coord$x,grid.coord$x))
rangoy=range(c(ac.coord$y,grid.coord$y))
plot(ac.coord$x,ac.coord$y,pch=19,xlim=rangox,ylim=rangoy)
points(grid.coord$x,grid.coord$y,col='red')
ac.coord=matrix(res$coord[ngibbs-1,],n.ac,2)
n.ac=15
ac.coord=matrix(res$coord[ngibbs-1,],n.ac,2)
plot(res$theta[ngibbs,],type='h')
set.seed(7)
#basic setup
n.tsegm=400
n.ac=9
n.grid=100
n=floor(runif(n.tsegm,min=0,max=900))
#spatial coordinates of locations
grid.coord=data.frame(x=runif(n.grid,min=0,max=100),
y=runif(n.grid,min=0,max=100))
#spatial coordinates of activity centers
ac.coord.true=ac.coord=data.frame(x=runif(n.ac,min=0,max=100),
y=runif(n.ac,min=0,max=100))
rangox=range(c(ac.coord$x,grid.coord$x))
rangoy=range(c(ac.coord$y,grid.coord$y))
plot(ac.coord$x,ac.coord$y,pch=19,xlim=rangox,ylim=rangoy)
points(grid.coord$x,grid.coord$y,col='red')
points(ac.coord[,1],ac.coord[,2],col='blue')
points(ac.coord[,1],ac.coord[,2],col='blue',cex=2)
set.seed(7)
#basic setup
n.tsegm=400
n.ac=9
n.grid=100
n=floor(runif(n.tsegm,min=0,max=900))
#spatial coordinates of locations
grid.coord=data.frame(x=runif(n.grid,min=0,max=100),
y=runif(n.grid,min=0,max=100))
#spatial coordinates of activity centers
ac.coord.true=ac.coord=data.frame(x=runif(n.ac,min=0,max=100),
y=runif(n.ac,min=0,max=100))
rangox=range(c(ac.coord$x,grid.coord$x))
rangoy=range(c(ac.coord$y,grid.coord$y))
plot(ac.coord$x,ac.coord$y,pch=19,xlim=rangox,ylim=rangoy)
points(grid.coord$x,grid.coord$y,col='red')
n.ac=15
ac.coord=matrix(res$coord[ngibbs-1,],n.ac,2)
ac.coord=matrix(res$coord[ngibbs-1,],n.ac,2)
seq1=1:7
points(ac.coord[seq1,1],ac.coord[seq1,2],col='blue',cex=2)
rm(list=ls(all=TRUE))
set.seed(8)
#basic setup
n.tsegm=400
n.ac=5
n.grid=100
n=floor(runif(n.tsegm,min=0,max=900))
#spatial coordinates of locations
grid.coord=data.frame(x=runif(n.grid,min=0,max=100),
y=runif(n.grid,min=0,max=100))
#spatial coordinates of activity centers
ac.coord.true=ac.coord=data.frame(x=runif(n.ac,min=0,max=100),
y=runif(n.ac,min=0,max=100))
rangox=range(c(ac.coord$x,grid.coord$x))
rangoy=range(c(ac.coord$y,grid.coord$y))
plot(ac.coord$x,ac.coord$y,pch=19,xlim=rangox,ylim=rangoy)
points(grid.coord$x,grid.coord$y,col='red')
#cluster membership
z.true=z=sample(1:n.ac,size=n.tsegm,replace=T)
#distance decay parameter
phi.true=phi=0.1
#generate data
y=matrix(NA,n.tsegm,n.grid)
for (i in 1:n.tsegm){
#calculate distance
x2=(grid.coord$x-ac.coord$x[z[i]])^2
y2=(grid.coord$y-ac.coord$y[z[i]])^2
d=sqrt(x2+y2)
#calculate probability
tmp=exp(-phi*d)
prob=tmp/sum(tmp)
#draw results
y[i,]=rmultinom(1,size=n[i],prob=prob)
}
image(y[z==3,])
setwd('U:\\GIT_models\\activity_center1')
write.csv(y,'fake data.csv',row.names=F)
write.csv(grid.coord,'fake data grid.csv',row.names=F)
rm(list=ls(all=TRUE))
set.seed(11)
#read important functions
setwd('U:\\GIT_models\\activity_center1')
library('Rcpp')
sourceCpp('aux1.cpp')
source('gibbs sampler.R')
source('gibbs functions.R')
#get data
dat=read.csv('fake data.csv',as.is=T)
grid.coord=read.csv('fake data grid.csv',as.is=T)
#basic setup
ngibbs=1000
nburn=ngibbs/2
n.ac=10
gamma1=0.1
#initial coordinates for activity centers (define this based on data instead of uninformative as below)
ac.coord.init=data.frame(x=runif(n.ac,min=0,max=100),
y=runif(n.ac,min=0,max=100))
#run gibbs sampler
options(warn=2)
res=gibbs.activity.center(dat=dat,grid.coord=grid.coord,n.ac=n.ac,
ac.coord.init=ac.coord.init,gamma1=gamma1)
rm(list=ls(all=TRUE))
set.seed(8)
#basic setup
n.tsegm=400
n.ac=6
n.grid=100
n=floor(runif(n.tsegm,min=0,max=900))
#spatial coordinates of locations
grid.coord=data.frame(x=runif(n.grid,min=0,max=100),
y=runif(n.grid,min=0,max=100))
#spatial coordinates of activity centers
ac.coord.true=ac.coord=data.frame(x=runif(n.ac,min=0,max=100),
y=runif(n.ac,min=0,max=100))
rangox=range(c(ac.coord$x,grid.coord$x))
rangoy=range(c(ac.coord$y,grid.coord$y))
plot(ac.coord$x,ac.coord$y,pch=19,xlim=rangox,ylim=rangoy)
points(grid.coord$x,grid.coord$y,col='red')
#cluster membership
z.true=z=sample(1:n.ac,size=n.tsegm,replace=T)
#distance decay parameter
phi.true=phi=0.1
#generate data
y=matrix(NA,n.tsegm,n.grid)
for (i in 1:n.tsegm){
#calculate distance
x2=(grid.coord$x-ac.coord$x[z[i]])^2
y2=(grid.coord$y-ac.coord$y[z[i]])^2
d=sqrt(x2+y2)
#calculate probability
tmp=exp(-phi*d)
prob=tmp/sum(tmp)
#draw results
y[i,]=rmultinom(1,size=n[i],prob=prob)
}
image(y[z==3,])
setwd('U:\\GIT_models\\activity_center1')
write.csv(y,'fake data.csv',row.names=F)
write.csv(grid.coord,'fake data grid.csv',row.names=F)
rm(list=ls(all=TRUE))
set.seed(11)
#read important functions
setwd('U:\\GIT_models\\activity_center1')
library('Rcpp')
sourceCpp('aux1.cpp')
source('gibbs sampler.R')
source('gibbs functions.R')
#get data
dat=read.csv('fake data.csv',as.is=T)
grid.coord=read.csv('fake data grid.csv',as.is=T)
#basic setup
ngibbs=1000
nburn=ngibbs/2
n.ac=10
gamma1=0.1
#initial coordinates for activity centers (define this based on data instead of uninformative as below)
ac.coord.init=data.frame(x=runif(n.ac,min=0,max=100),
y=runif(n.ac,min=0,max=100))
#run gibbs sampler
options(warn=2)
res=gibbs.activity.center(dat=dat,grid.coord=grid.coord,n.ac=n.ac,
ac.coord.init=ac.coord.init,gamma1=gamma1)
set.seed(8)
#basic setup
n.tsegm=400
n.ac=6
n.grid=100
n=floor(runif(n.tsegm,min=0,max=900))
#spatial coordinates of locations
grid.coord=data.frame(x=runif(n.grid,min=0,max=100),
y=runif(n.grid,min=0,max=100))
#spatial coordinates of activity centers
ac.coord.true=ac.coord=data.frame(x=runif(n.ac,min=0,max=100),
y=runif(n.ac,min=0,max=100))
rangox=range(c(ac.coord$x,grid.coord$x))
rangoy=range(c(ac.coord$y,grid.coord$y))
plot(ac.coord$x,ac.coord$y,pch=19,xlim=rangox,ylim=rangoy)
points(grid.coord$x,grid.coord$y,col='red')
#cluster membership
z.true=z=sample(1:n.ac,size=n.tsegm,replace=T)
#distance decay parameter
phi.true=phi=0.1
#generate data
y=matrix(NA,n.tsegm,n.grid)
for (i in 1:n.tsegm){
#calculate distance
x2=(grid.coord$x-ac.coord$x[z[i]])^2
y2=(grid.coord$y-ac.coord$y[z[i]])^2
d=sqrt(x2+y2)
#calculate probability
tmp=exp(-phi*d)
prob=tmp/sum(tmp)
#draw results
y[i,]=rmultinom(1,size=n[i],prob=prob)
}
image(y[z==3,])
plot(res$logl,type='l')
plot(res$theta[ngibbs,],type='h')
plot(res$phi,type='l')
abline(h=phi.true,col='red')
k=data.frame(estim=res$z[ngibbs,],true1=z.true)
z=table(k);z
ordem=numeric()
for (i in 1:ncol(z)){
ind=which(z[,i]==max(z[,i]))
ordem=c(ordem,ind)
}
table(k)[ordem,]
n.ac=15
ac.coord=matrix(res$coord[ngibbs-1,],n.ac,2)
ac.coord[ordem,]
ac.coord.true
rango=range(c(ac.coord.true),ac.coord[ordem,])
plot(ac.coord.true$x,ac.coord[ordem,1],xlim=rango,ylim=rango)
lines(rango,rango,col='red')
n.ac=10
ac.coord=matrix(res$coord[ngibbs-1,],n.ac,2)
ac.coord[ordem,]
ac.coord.true
rango=range(c(ac.coord.true),ac.coord[ordem,])
plot(ac.coord.true$x,ac.coord[ordem,1],xlim=rango,ylim=rango)
lines(rango,rango,col='red')
plot(ac.coord.true$y,ac.coord[ordem,2],xlim=rango,ylim=rango)
lines(rango,rango,col='red')
